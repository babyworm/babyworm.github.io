<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Verification on Babyworm Hugo Site</title>
    <link>http://localhost:8080/categories/verification/</link>
    <description>Recent content in Verification on Babyworm Hugo Site</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>babyworm@gmail.com (babyworm)</managingEditor>
    <webMaster>babyworm@gmail.com (babyworm)</webMaster>
    <copyright>© Babyworm, All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 17 Dec 2020 06:28:29 +0000</lastBuildDate>
    <atom:link href="http://localhost:8080/categories/verification/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DVCON US  2020 virtual conference</title>
      <link>http://localhost:8080/archives/2205/</link>
      <pubDate>Thu, 17 Dec 2020 06:28:29 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/2205/</guid>
      <description>DVCON US 2020 virtual로 개최된지 1년정도되어 대부분의 video가 open되었습니다. Schedule에서 각 presentation을 볼 수 있으니, 궁금하신 분들은 확인해보시면 되겠습니다 https://2020.dvcon-virtual.org/ https://2020.dvcon-virtual.org/schedule/full?date=2020-03-02 DVCON에서 검증 관련해서 신박한 아이디어를 얻을 수도 있으니, UVM을 굳이 사용하지 않으시더라도(요즘 UVM이 워낙 주류로 DV</description>
    </item>
    <item>
      <title>Parallelized Logic Simulation</title>
      <link>http://localhost:8080/archives/2051/</link>
      <pubDate>Tue, 09 Jan 2018 17:22:51 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/2051/</guid>
      <description>얼마전부터 parallel simulation이 큰 이슈가 되었습니다. 몇몇 기사에서는 3세대 simulation 기법이라고 이야기하더군요. Verilog-XL 처럼 interpreter 형태를 1세대로, 2 세대를 finesim, VCS, NCVerilog 처럼 compiled 형태를 2세대로, 그리고, 다수의 processor를 동시에 쓰는 형태를 3세대로 이야기하는 거죠. 그간 simulation에서 multicore를 사용하는 건 별로 없</description>
    </item>
    <item>
      <title>Getting Started with UVM</title>
      <link>http://localhost:8080/archives/1975/</link>
      <pubDate>Tue, 09 May 2017 15:10:13 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/1975/</guid>
      <description>오랜만에 책 소개입니다. https://www.amazon.com/Getting-Started-UVM-Beginners-Guide/dp/0615819974 지난 연휴때 읽어볼 요량으로 샀는데, 이곳 저곳 다니다가 이번 연휴 때 읽게 되었습니다. 특이하게 스타벅스에서 읽었네요. (음.. 제 생활 패턴으로 봤을 때 안 특이한건가.. 싶기도 하네요..) 이 책은 사진을 보시면 아시겠지만 엄청나게 얇습니다. 솔직하게 이야기하면, 받고나서 좀 아까웠습니다. (뭐 두꺼운게 좋은 책이</description>
    </item>
    <item>
      <title>DVCON 2017 간략 리뷰</title>
      <link>http://localhost:8080/archives/1944/</link>
      <pubDate>Sun, 05 Mar 2017 16:15:57 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/1944/</guid>
      <description>바로 밑에 DVCON 2016리뷰가 있는 걸 보니, blog에 얼마나 무관심했는지 약간 죄책감이 듭니다만 꺼리가 생겼으니 써야겠죠. DVCON(Design &amp;amp; Verification Conference)은 산업계에서 주도해서 열고 있는 회의로, DVCON을 주최하고 있는 Accellra(http://accellera.org/)가 SystemC, VHDL, SystemVerilog, UVM, IP-XACT, UPF등의 굵직굵직한 산업계의 주</description>
    </item>
    <item>
      <title>DVCON 2016 간략 리뷰</title>
      <link>http://localhost:8080/archives/1927/</link>
      <pubDate>Sun, 20 Mar 2016 14:06:50 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/1927/</guid>
      <description>DVCON2016(https://dvcon.org/) 에 다녀왔습니다. DAC15때 Draft만 적고 publish를 못한 전력이 있어서, 되도록 빨리 쓰고 올릴려고 했습니다만, 쉽지 않았습니다. DVCON은 처음 다녀왔는데요. 일단 주제가 Verification이라는 부분으로 한정되어 있어서 내용에 대한 집중이 좋았다는 측면에서 DAC보다 괜찮았습니다. (물론, DAC의 경우 설</description>
    </item>
    <item>
      <title>wxPython</title>
      <link>http://localhost:8080/archives/1728/</link>
      <pubDate>Sat, 22 Sep 2012 17:40:51 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/1728/</guid>
      <description>예전에 simulator를 만들때 cross platform에서 GUI를 만드는 것이 참 어려웠던 기억이 있습니다. 그나마 좀 쓸만한 것이 TK 기반의 gui들인데, 그나마 perl-tk를 이용하는 것이 가장 무난했던 것 같습니다. (그 전에는 TCL/TK를 썼지만, linux에 perl은 windows를 제외한 대부분의 platform에 p</description>
    </item>
    <item>
      <title>HM 모델에서 doxygen으로 문서 만들기</title>
      <link>http://localhost:8080/archives/1722/</link>
      <pubDate>Tue, 26 Jun 2012 13:47:13 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/1722/</guid>
      <description>이거 사실 어려운 거 아닌데, 생각보다 모르시는 분들이 많으시네요.. HM model에 보면 doc directory에 doxygen을 통해서 문서를 생성할 수 있도록 설정이 되어 있고, graphviz를 이용해서 아주 훌륭한 class 상속관계도를 볼 수도 있습니다. 저는 Linux에서라면야 대부분 깔려있겠지만, 혹시라도 안깔려 있다면 sudo apt-g</description>
    </item>
    <item>
      <title>SystemVerilog</title>
      <link>http://localhost:8080/archives/1555/</link>
      <pubDate>Wed, 18 May 2011 15:02:02 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/1555/</guid>
      <description>IT-SoC 센터에서 SystemVerilog Verification을 한다기에 들어왔습니다. 몇년째 책을 보고 예제 몇 개 끄적이다가 잊고.. DPI오~ 예제 몇 개 끄적여보다 잊고.. OVM사용해보고.. 예제 몇 개 끄적여보다 잊고.. UVM 오~~ 예제 몇 개 끄적여보다 잊고를 반복하고 있어서, 이번에는 제대로 듣고 업무에 적용을 해 봐야겠다는 생각이 있습니다. 근데.. 초반</description>
    </item>
    <item>
      <title>Verification Goldmine</title>
      <link>http://localhost:8080/archives/1546/</link>
      <pubDate>Mon, 28 Feb 2011 16:39:20 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/1546/</guid>
      <description>Functional Simulation를 주력 tool로 삼고 있는 Cadence와 Mentor에서는 각각 functional verification method와 다양한 라이브러리, 그리고 양질의 자료를 주고 있는데요. 물론, 자사의 simulation tool을 위주로 설명하고 있지만, 개념을 이해하는데는 별로 어려움이 없으니 한번 볼만 하죠.&amp;nbsp; Cadence에서 중요한 검증 관련 자료를 모</description>
    </item>
    <item>
      <title>Modelsim에서의 Code Coverage</title>
      <link>http://localhost:8080/archives/1320/</link>
      <pubDate>Fri, 05 Dec 2008 05:34:35 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/1320/</guid>
      <description>예전에 후배가 한 세미나 자료에서 그림을 많이 발췌합니다. 항상 검증을 언제 끝낼 것인가 하는 문제는 어렵습니다. 그래서, 검증할 때 coverage를 측정하여 검증을 언제 마칠것이냐 하는 것을 참고하게 됩니다. Functional verification때 고려하는 coverage로는 code coverage와 function coverage라는 것이 있는데, code cov</description>
    </item>
    <item>
      <title>끊임 없는 삽질..</title>
      <link>http://localhost:8080/archives/380/</link>
      <pubDate>Wed, 20 Feb 2008 08:47:49 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/380/</guid>
      <description>약간 정신이 없는 상태에서 일을 했더니만 결국은 삽질로 빠지는 경우가 많습니다. 오늘의 삽질은 perl 에서 ord의 사용에 관한 것이지요. 그 동안 compiler에 의하여 생성된 elf 파일을 objcopy utility로 binary file을 생성하고, 이걸 perl에서 $hexval = ord(getc(INHANDLE)); 과 같은 방법으로 verilog HDL에서 읽을 수 있는 파일 형식(readmemh()를 이용하는 거죠</description>
    </item>
    <item>
      <title>Open Verification Methodology 공개!</title>
      <link>http://localhost:8080/archives/373/</link>
      <pubDate>Fri, 11 Jan 2008 08:27:04 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/373/</guid>
      <description>VMM에 맞은 편에 존재하던 mentor의 AVM이 있었습니다만, 무게감이 떨어지는 듯 했었지요. 얼마전에 Cadence와 Mentor가 같이 OVM을 위하여 작업을 한다는 이야기가 솔솔 흘러나왔고, Synopsys의 합류를 권장했지만 거절당했다는 이야기도 있었지요. 그 OVM이 공개되었군요.. (언제 공개된거지?) 음.. 뉴스</description>
    </item>
    <item>
      <title>PLI에서 TCP/IP를 통해서 통신하고, perl server에서 처리하기</title>
      <link>http://localhost:8080/archives/367/</link>
      <pubDate>Tue, 04 Dec 2007 10:22:36 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/367/</guid>
      <description>예전에 PLI에서 윈도우 제어 하려고 별짓을 다했었는데, 그 중에 PLI에서 TK 윈도우를 바로 부른 것도 있었습니다. PLI에서 TK를 부르는(C-TK interwork을 이용한) 방법은 TK 스크립을 거의 직접 쓸 수 있다는 점에서 편리하긴 한데, NCVerilog에서 너무 버전을 심하게 탄다는 단점(TK의 버전도 맞춰 줘야 합니다. -_-;</description>
    </item>
    <item>
      <title>Open Verification Library 간단하게..</title>
      <link>http://localhost:8080/archives/322/</link>
      <pubDate>Thu, 18 Oct 2007 03:36:54 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/322/</guid>
      <description>OVL(Open Verification Library)은 상당히 오래전부터 보아왔던 assertion library인데요. 제 기억이 맞다면 거의 최초의 ABV(assertionbased verification)쪽 라이브러리가 아닌가 기억됩니다. Foster라는 분이 박사 논문으로 작성한 것이, 발전을 거듭해서 ABV라는 것까지 발전한 것으로 기억되는데, 정확한 사실인지는 찾아보지 않고 기억에 의존한 것이라 틀</description>
    </item>
    <item>
      <title>Cygwin에서의 printer port 제어</title>
      <link>http://localhost:8080/archives/316/</link>
      <pubDate>Wed, 03 Oct 2007 03:28:03 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/316/</guid>
      <description>별 다른 내용은 아닙니다만, 기억해두기 위해서 적습니다. JTAG을 이용한 디버거를 만들고, PC상에서 테스트 하는데 소프트웨어 팀에서 만든 비주얼 스튜디오 기반의 프로그램은 제가 고칠수가 없어서(VS 라이센스가 한정되어 있다보니..), cygwin상에서 간단하게 제어하는 프로그램을 만들게 되었습니다. 제가 알기로는 linux의 경</description>
    </item>
    <item>
      <title>집중이 안되는 여름</title>
      <link>http://localhost:8080/archives/286/</link>
      <pubDate>Tue, 19 Jun 2007 12:22:05 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/286/</guid>
      <description>연일 30도를 넘나드는 더위가 계속되고 있습니다. 이럴때 항상 문제가 되는 것이 집중력이 떨어진다는 건데요.. 저도 마찬가지 입니다. (실은 개인적으로 좋은 일이 생겨서 그럴지도 모르겠습니다만 ^^;) 오늘만해도 gcc-MinGW에서 mti vpi 연결시키는 거 때문에 잠깐 modelsim userguide를 보다가, 딴짓을 하기 시작해서 대략한 5시간동안 딴짓을 했</description>
    </item>
    <item>
      <title>PLI와 Simulator의 연결(I)</title>
      <link>http://localhost:8080/archives/284/</link>
      <pubDate>Mon, 11 Jun 2007 14:45:03 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/284/</guid>
      <description>Automated Functional Verification 방법에는 여러 가지가 있지만, testvector 발생 유닛(보통 Directed Random방식을 사용하지요?)과 golden model을 이용한 checker model을 만들어서 DUV(Design Under Verification)의 결과와 비교하는 것이 가장 편한 방법 중에 하나임은 부정할 수 없습니다. (여담입니다만, 국내에서는 많은 경우 golden model없이 설계하는 경우가 많아서 검증을 위하여</description>
    </item>
    <item>
      <title>Perl을 이용해서 검증할때 유용한 팁</title>
      <link>http://localhost:8080/archives/282/</link>
      <pubDate>Mon, 04 Jun 2007 14:46:20 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/282/</guid>
      <description>뭐랄까요.. 요즘 이런 저런 일로 바쁘다보니, 사람이 좀 얇팍하게 글을 쓰게되네요. 🙂 (퇴고 없이 그냥 온라인에서 쓰는 글이라 앞뒤가 없을지도 모르겠습니다.) 오늘은 여러분들께서 perl을 이용해서 Verilog HDL을 위한 testbench를 작성할 때 간단히 명령어 해석기를 만들어 사용하는 방법을 알려드리죠. 이 방법은 제가 JTAG을 위한 pro</description>
    </item>
    <item>
      <title>검증 계획 작성하기</title>
      <link>http://localhost:8080/archives/279/</link>
      <pubDate>Mon, 14 May 2007 15:34:49 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/279/</guid>
      <description>사실 검증이란 걸 처음 시작하면 정신이 아득해집니다. 도대체 뭘 어떻게 검증해야 하며, 언제 끝을 내야지만 하는가.. 이런 부분에 대한 교육이 부족했기 때문이겠지요 그래서, 이런걸 체계적으로 정리하자는 것이 “검증 계획(verification plan)”입니다. 설계 계획에 해당하는 spec. 작업이 설계에 있어서 가장 중요하듯, 검증에 있어서도</description>
    </item>
    <item>
      <title>Coverage와 Assertion</title>
      <link>http://localhost:8080/archives/262/</link>
      <pubDate>Mon, 02 Apr 2007 11:51:35 +0000</pubDate><author>babyworm@gmail.com (babyworm)</author>
      <guid>http://localhost:8080/archives/262/</guid>
      <description>검증에 있어서 고려되어야 하는 사항중에 하나는 “언제 검증을 그만 둘 것인가”입니다. 너무나도 쉬운 질문이지요? 뭐, 검증할 부분을 다하면 검증을 그만 두면 되죠. 그럼 질문을 바꿔보겠습니다. “검증할 부분에 대하여 모두 검증했는지는 어떻게 알지요?” 그것이 오늘 말씀드릴 coverage에 대한 부분입니다. 사실 이쪽 계통에서 coverag</description>
    </item>
  </channel>
</rss>
